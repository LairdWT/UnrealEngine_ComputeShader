#include "/Engine/Public/Platform.ush"

RWTexture2D<float4> OutputTexture;
float2 Dimensions;
uint TimeStamp;

float DE(float3 pos, out int iterations)
{
    float powerTimeModulation = 8.0 + 3.0 * sin(0.1 * TimeStamp);
    const float POWER = powerTimeModulation;
    float3 z = pos;
    float dr = 1.0;
    float r = 0.0;
    const int MAX_ITERATIONS = 256;

    for(int i = 0; i < MAX_ITERATIONS; i++)
    {
        r = length(z);
        if (r > 2.0) 
        {
            iterations = i;
            return 0.5 * log(r) * r / dr;
        }

        float theta = acos(z.z / r);
        float phi = atan2(z.y, z.x);
        dr = pow(r, POWER-1.0) * POWER * dr + 1.0;

        float zr = pow(r, POWER);
        theta *= POWER;
        phi *= POWER;

        z = zr * float3(sin(theta)*cos(phi), sin(phi)*sin(theta), cos(theta));
        z += pos;
        z += sin(0.1 * TimeStamp) * 0.0005;
    }

    iterations = MAX_ITERATIONS;
    return 0.5 * log(r) * r / dr;
}

float AO(float3 pos, float3 nor)
{
    float occ = 0.0;
    float sca = 1.0;
    for (int i = 0; i < 32; i++)
    {
        float hr = 0.01 + 0.05 * float(i) / 4.0;
        float3 aopos = nor * hr + pos;
        int it;
        float dd = DE(aopos, it);
        occ += -(dd - hr) * sca;
        sca *= 0.8;
    }
    return clamp(1.0 - occ, 0.0, 1.0);
}

float3 GetColor(float ratio)
{
    float3 colors[3];
    colors[0] = float3(0.7, 0.1, 0.1);  // Red
    colors[1] = float3(0.1, 0.7, 0.1);  // Green
    colors[2] = float3(0.1, 0.1, 0.7);  // Blue

    int idx = int(ratio + sin(0.1 * TimeStamp)); // Using the time modulation for color variation.
    float fracted = frac(ratio);

    float3 colorA = colors[idx % 3];
    float3 colorB = colors[(idx + 1) % 3];
    
    return lerp(colorA, colorB, fracted);
}

[numthreads(THREADGROUPSIZE_X, THREADGROUPSIZE_Y, THREADGROUPSIZE_Z)]
void MainComputeShader(uint3 DTid : SV_DispatchThreadID)
{
    float time = TimeStamp * 0.01; // scale down the time effect
    float3 cameraPos = float3(4.0 * sin(time), 2.0, 4.0 * cos(time));
    float3 targetPos = float3(0.0, 0.0, 0.0);
    float3 upVector = float3(0.0, 1.0, 0.0);

    float3 forward = normalize(targetPos - cameraPos);
    float3 right = cross(upVector, forward);
    float3 up = cross(forward, right);

    float3 rayDir = normalize(forward + 
                    (DTid.x / Dimensions.x - 0.5) * right + 
                    (DTid.y / Dimensions.y - 0.5) * up);

    const int MAX_RAY_STEPS = 200;
    const float MIN_DIST = 0.005;
    const float MAX_DIST = 100.0;
    float depth = 0.1;

    for(int i = 0; i < MAX_RAY_STEPS; i++)
    {
        float3 p = cameraPos + depth * rayDir;
        int iters;
        float d = DE(p, iters);

        if (d < MIN_DIST)
        {
            float3 normal = normalize(float3(
                DE(p + float3(0.01, 0.0, 0.0), iters) - DE(p - float3(0.01, 0.0, 0.0), iters),
                DE(p + float3(0.0, 0.01, 0.0), iters) - DE(p - float3(0.0, 0.01, 0.0), iters),
                DE(p + float3(0.0, 0.0, 0.01), iters) - DE(p - float3(0.0, 0.0, 0.01), iters)
            ));

            float ratio = (float(iters) + depth * 0.1) / 200.0; 
            float3 color = GetColor(ratio) * AO(p, normal);
            OutputTexture[DTid.xy] = float4(color, 1.0);
            return;
        }

        depth += d;

        if (depth >= MAX_DIST)
        {
            OutputTexture[DTid.xy] = float4(0.05, 0.10, 0.10, 1.0); // Background color
            return;
        }
    }

    OutputTexture[DTid.xy] = float4(0.05, 0.10, 0.10, 1.0);
}
